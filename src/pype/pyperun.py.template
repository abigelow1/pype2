#!%%PYTHONEXE%%
# -*- Mode: Python; tab-width: 4; py-indent-offset: 4; -*-

"""
**Pype loader**

Note that \%\%PYPEDIR\%\% gets expanded using sed (textually)
by the Buildfile system during the compile/install procedure!


Author -- James A. Mazer (james.mazer@yale.edu)

**Revision History**

Wed Dec 26 15:58:28 2001 mazer

- Front end loader for "pype".  This is like the old pype shell
  script, but it's pure python (execept that it needs root access
  via pypeboot::

    usage: pyperun [task]     -> run with gui & framebuffer
           pyperun -s [args]  -> interactive shell (aka pypenv)

Mon Sep 18 10:00:05 2006 mazer
  Notes about variables::

    PYPEDIR       This is the install directory for pype
    PYPERC        User's configuration directory. This defaults to
                  ~/.pyperc, unless overridden with an environment
                  variable
    PYPEPATH      colon-delimited search path
    SUBJECT       subject id (for subject-specific config files)

Fri Oct 22 09:34:47 2010 mazer
  Added --config option

"""

__author__   = '$Author$'
__date__     = '$Date$'
__revision__ = '$Revision$'
__id__       = '$Id$'

__debug = 0
__show_help = 0
__show_pypedir = 0
__show_imports = 0
__show_config = 0
__show_version = 0
__psych_mode = 0

import sys
import posixpath
import os
import glob
import string
import traceback
import code
import imp

def _addpath(d, atend=None):
    """Add directory to the HEAD (or TAIL) of the python search path."""
    if atend:
        sys.path = sys.path + [d]
    else:
        sys.path = [d] + sys.path

def _run_script(fullname):

    """Run module as script -- script name include .py extension."""
    name = posixpath.basename(fullname)
    if name[-3:] == '.py':
        name = name[:-3]                # strip .py extension

    modname = [string.join(fullname.split('/')[0:-1],'/')]
    trylist = ((name, None), (name+'.py', None),
               (name, modname), (name+'.py', modname))

    # look for the modulate in standard locations, load it if you
    # find it, otherwise return 1
    for fname, path in trylist:
        try:
            if path:
                fp, pathname, description = imp.find_module(fname, path)
            else:
                fp, pathname, description = imp.find_module(fname)
        except ImportError:
            fp = None
        if fp:
            sys.argv[0] = pathname
            try:
                mod = imp.load_module('__main__', fp, pathname, description)
            finally:
                fp.close()
            return 1
    return 0

av = []
for a in sys.argv:
    if a[:2] == 's=':
        os.environ['SUBJECT'] = a[2:]
    elif a == '--dir':
        __show_pypedir = 1
    elif a == '--debug':
        __debug = 1
        __show_imports = 1
        os.environ['PYPEDEBUG'] = "1"
    elif a == '--config':
        __show_config = 1
    elif a == '--help':
        __show_help = 1
    elif a == '--version' or a == '-v':
        __show_version = 1
    elif a == '--psych' or a == '-p':
        __psych_mode = 1
    else:
        av.append(a)
sys.argv = av

if __show_help:
    print """\
pypenv/pype options:
  --version|-v   show version info
  --dir          show value of PYPEDIR and exit
  --config       show list of config vars
  --debug        set DEBUG mode (or use env var DEBUG)
  --help         this message
  --psych|-p     psychophysics mode (start with framebuffer hidden)
  -s             start in interactive mode (ie, run pypenv)
  -s <script>    run specified script
  s=<subject-id> run withsubject-d to specified value (or use env var SUBJECT)
  <task>         load task on start\
    """
    sys.exit(0)

if not os.environ.has_key('HOME'):
	sys.stderr.write('%s: please set $HOME and restart\n' % sys.argv[0])
	sys.exit(1)
if not os.environ.has_key('PYPEDIR'):
    pd = "%%PYPEDIR%%"
    os.environ['PYPEDIR'] = pd
    sys.stderr.write('Warning: no $PYPEDIR; using "%s".\n' % pd)


_original_path = sys.path[::]
_addpath(os.environ['PYPEDIR']+ '/pype', atend=0)
if os.environ.has_key('LD_LIBRARY_PATH'):
    # ensures pickup of Eyelink shared libraries
    os.environ['LD_LIBRARY_PATH'] = os.environ['PYPEDIR'] + '/lib:' + \
                                    os.environ['LD_LIBRARY_PATH']

##############################################################
# From here on out pype modules are importable!
##############################################################

if __show_pypedir:
    print os.environ['PYPEDIR']
    sys.exit(0)
if __show_config:
    from configvars import defaults_info
    print defaults_info()
    sys.exit(0)
if __show_version:
    from pypeversion import *
    print "pype version:", PypeVersion
    print "         svn:", __revision__
    print "   installed:", PypeInstallDate
    print "  build from:", PypeBuildDir
    print "    build by: %s@%s" % (PypeBuildBy, PypeBuildHost)
    print "    build on:", PypeBuildDate
    sys.exit(0)

try:
    from pype import *
    from importer import importer
except ImportError:
	(etype, evalue, tb) = sys.exc_info()
	stack = traceback.extract_tb(tb)
	(fname, line, fn, text) = stack[-1]
    sys.stderr.write("""Error when importing 'pype':\n""")
    sys.stderr.write("file:%s line:%d --> %s\n" % (fname, line, evalue))
	sys.exit(1)

# prefix user-specified PYPEPATH directories -- colon deliminated
if os.environ.has_key('PYPEPATH'):
    for d in string.split(os.environ['PYPEPATH'], ':')[::-1]:
        _addpath(d, atend=0)

# prefix ~/.pyperc directories to the python search path
for i in ['Tasks', 'Modules']:
    _addpath(pyperc(i), atend=0)

for d in glob.glob(pyperc('Tasks/*')):
    if os.path.isdir(d):
        _addpath(d, atend=0)

# lastly, add current directory to allow local overrides!
_addpath('.', atend=0)

if __show_imports:
    importer(report=1)
    
if __debug:
    sys.stderr.write('-- Search Path -------------\n')
    for d in sys.path:
        if len(d) and (not d in _original_path):
            sys.stderr.write(' + %s\n' % d)
    sys.stderr.write('----------------------------\n')

if len(sys.argv) > 1 and sys.argv[1] == '-s':
    # Invoked with -s argument (ie, pypenv):
    #   -s script  --> run script non-interactively
    #   -s         --> drop into interactive shell
    if len(sys.argv) == 2:
        sys.stdout.write('[pype interactive shell (python %d.%d.%d)]\n' % \
                         sys.version_info[0:3])
        code.interact(banner='')
    else:
        # run specified script with remaining command line args
        sys.argv = sys.argv[2:]
        if _run_script(sys.argv[0]) == 0:
            sys.stderr.write("pyperun: can't find module '%s'\n" % sys.argv[0])
            sys.exit(1)
else:
    # Invoked as plain old 'pype'; make sure subj dir exists and start gui
    if not posixpath.exists(subjectrc()):
        try:
            os.mkdir(subjectrc())
            os.chown(subjectrc(), os.getuid(), os.getgid())
            sys.stderr.write("pyperun: made %s\n" % subjectrc())
        except OSError:
            sys.stderr.write("pyperun: can't create %s\n" % subjectrc())
            sys.exit(1)

    args = sys.argv[1:]
	try:
		app = PypeApp(psych=__psych_mode)
	except FatalPypeError:
        sys.stderr.write("pyperun: fatal error starting gui\n")
		sys.exit(1)

    if len(args) > 0:
        task = posixpath.splitext(args[0])[0]
		try:
			app.newloadtask(task)
		except ImportError:
			sys.stderr.write("%s: can't load task '%s'\n" % (sys.argv[0], task))
			sys.exit(1)
            
    while not app.terminate:
        app.idlefn(toplevel=1)
	app.close()
    sys.exit(0)
    

#!%%PYTHONEXE%%
# -*- Mode: Python; tab-width: 4; py-indent-offset: 4; -*-

"""
**Pype loader**

Note that \%\%PYPEDIR\%\% gets expanded using sed (textually)
by the Buildfile system during the compile/install procedure!


Author -- James A. Mazer (james.mazer@yale.edu)

**Revision History**

Wed Dec 26 15:58:28 2001 mazer

- Front end loader for "pype".  This is like the old pype shell
  script, but it's pure python (execept that it needs root access
  via pypeboot::

    usage: pyperun [task]     -> run with gui & framebuffer
           pyperun -s [args]  -> interactive shell (aka pypenv)

Mon Sep 18 10:00:05 2006 mazer
  Notes about variables::

    PYPEDIR       This is the install directory for pype
    PYPERC        User's configuration directory. This defaults to
                  ~/.pyperc, unless overridden with an environment
                  variable
    PYPEPATH      colon-delimited search path
    SUBJECT       subject id (for subject-specific config files)

"""

__author__   = '$Author$'
__date__     = '$Date$'
__revision__ = '$Revision$'
__id__       = '$Id$'

_debug = 0
_show_pypedir = 0
_showimports = 0

import sys
import posixpath
import os
import glob
import string
import traceback
import code
import platform
import imp

def _addpath(d, atend=None):
    """Add directory to the HEAD (or TAIL) of the python search path."""
    if atend:
        sys.path = sys.path + [d]
    else:
        sys.path = [d] + sys.path

def _run_script(fullname):

    """Run module as script -- script name include .py extension."""
    name = posixpath.basename(fullname)
    if name[-3:] == '.py':
        name = name[:-3]                # strip .py extension

    modname = [string.join(fullname.split('/')[0:-1],'/')]
    trylist = ((name, None), (name+'.py', None),
               (name, modname), (name+'.py', modname))

    # look for the modulate in standard locations, load it if you
    # find it, otherwise return 1
    for fname, path in trylist:
        try:
            if path:
                fp, pathname, description = imp.find_module(fname, path)
            else:
                fp, pathname, description = imp.find_module(fname)
        except ImportError:
            fp = None
        if fp:
            sys.argv[0] = pathname
            try:
                mod = imp.load_module('__main__', fp, pathname, description)
            finally:
                fp.close()
            return 1
    return 0

av = []
for a in sys.argv:
    if a[:2] == 's=':
        os.environ['SUBJECT'] = a[2:]
    elif a == '--dir':
        _show_pypedir = 1
    elif a == '--debug':
        _debug = 1
        _showimports = 1
        os.environ['PYPEDEBUG'] = "1"
    else:
        av.append(a)
sys.argv = av


if not os.environ.has_key('PYPEDIR'):
    os.environ['PYPEDIR'] = "%%PYPEDIR%%"
    sys.stderr.write('Warning: $PYPEDIR unset, using "%s".\n' % \
                     os.environ['PYPEDIR'])

if _show_pypedir:
    print os.environ['PYPEDIR']
    sys.exit(0)

if not os.environ.has_key('HOME'):
	sys.stderr.write('%s: please set $HOME and restart\n' % sys.argv[0])
	sys.exit(1)

# add $PYPEDIR.{pype,Taks,Modules} to python search path
_original_path = sys.path[:]
pd = os.environ['PYPEDIR']+'/'
for d in ['pype', 'Tasks', 'Modules']:
    _addpath(pd + d)

# Fri Dec 13 17:12:22 2002 mazer
#  -- add $PYPEDIR/lib onto LD_LIBRARY_PATH
#     to make sure DACQ modules can pickup the
#     eyelink shared library file..

if os.environ.has_key('LD_LIBRARY_PATH'):
    os.environ['LD_LIBRARY_PATH'] = os.environ['PYPEDIR'] + '/lib:' + \
                                    os.environ['LD_LIBRARY_PATH']
# now that $PYPEDIR is partially setup, pype and pype modules
# should be importable...

if sys.argv[1] == '-v' or sys.argv[1] == '--version':
    from pypeversion import *
    print "pype version:", PypeVersion
    print "         svn:", __revision__
    print "   installed:", PypeInstallDate
    print " b uild from:", PypeBuildDir
    print "    build by: %s@%s" % (PypeBuildBy, PypeBuildHost)
    print "    build on:", PypeBuildDate
    sys.exit(0)

try:
    from pype import *
    from importer import importer
except ImportError:
	(etype, evalue, tb) = sys.exc_info()
	stack = traceback.extract_tb(tb)
	(fname, line, fn, text) = stack[-1]
    sys.stderr.write("""Error when importing 'pype':\n""")
    sys.stderr.write("file:%s line:%d --> %s\n" % (fname, line, evalue))
	sys.exit(1)

# add user-specified PYPEPATH directories (if any) -- colon deliminated
if os.environ.has_key('PYPEPATH'):
    for d in string.split(os.environ['PYPEPATH'], ':')[::-1]:
        _addpath(d)

# add the ~/.pyperc directories to the python search path
for i in ['Tasks', 'Modules']:
    _addpath(pyperc(i))

for d in glob.glob(pyperc('Tasks/*')):
    if os.path.isdir(d):
        _addpath(d)

# lastly, add current directory to allow local overrides!
_addpath('.')

if _showimports:
    importer(report=1)
    
if _debug:
    sys.stderr.write('-- Search Path -------------\n')
    for d in sys.path:
        if len(d) and (not d in _original_path):
            sys.stderr.write(' + %s\n' % d)
    sys.stderr.write('----------------------------\n')

if len(sys.argv) > 1 and sys.argv[1] == '-s':
    # Invoked with -s argument -- typially as pypenv
    #   - could be eithre as script or for interactive session
    if len(sys.argv) == 2:
        # no command line args (beyond -s) -- startup an interactive session
        code.interact(banner='[pype interactive shell]')
    else:
        # with command line args -- run as script:
        #  - trim pyperun (this script) from sys.argv[] and then
        #    call _run_script to replace '-s' with requested module
        #    name, load and run.
        sys.argv = sys.argv[2:]
        if _run_script(sys.argv[0]) == 0:
            sys.stderr.write("pyperun: can't find module '%s'\n" % sys.argv[0])
            sys.exit(1)
else:
    # Invoked as plain old 'pype' -- full gui interface startup
    #  - make sure the subject directory exists
    #  - check to see if in psychophysics mode (-p)
    #  - and then startup the gui
    if not posixpath.exists(subjectrc()):
        try:
            os.mkdir(subjectrc())
            os.chown(subjectrc(), os.getuid(), os.getgid())
        except OSError:
            sys.stderr("Can't create subject directory!\n");
            sys.exit(1)

    psych = 0
    args = []
    for a in sys.argv[1:]:
        if a == '-p':
            psych = 1      # psychophysics mode (withdraw framebuffer on start)
        else:
            args.append(a)

	try:
		app = PypeApp(psych=psych)
	except FatalPypeError:
		sys.exit(1)

    if len(args) > 0:
        taskname = posixpath.splitext(args[0])[0]
		try:
			app.newloadtask(taskname)
		except ImportError:
			sys.stderr.write("%s: can't load task '%s'\n" % \
							 (sys.argv[0], taskname))
			sys.exit(1)

    while not app.terminate:
        app.idlefn(toplevel=1)
	app.close()
    sys.exit(0)
    
